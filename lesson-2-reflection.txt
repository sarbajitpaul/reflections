What happens when you initialize a repository? Why do you need to do it?

    When I initialize a repository, git automatically creates a hidden directory
    named '.git' which contains meta data about the repository. 
    We need to initialize a directory so that git can start tracking it and treat
    it like a git repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area denotes the area where all the changes made would be bundled
    up into a commit. Working directory is just the place where we do our stuff.
    It offers more flexibility.

How can you use the staging area to make sure you have one commit per logical
change?

    The staging area is an important part of git since it allows us to explicitly
    specify what changes are to be committed. The git diff and git diff --staged 
    are by far the most important commands I have seen so far.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Branching is particularly helpful when we are making a slightly different 
    version of the game or making experimental changes. Branches are used so that
    our working version remains intact and the slight changes that we are making 
    doesn't affect it.

How do the diagrams help you visualize the branch structure?

    The branch structure of git can easily be understood if we visualize it with
    a diagram. We can easily see that the whole project is not a linear series of
    commits, rather a non-linear tree like structure where each commit points to 
    it's parent. The commit which doesn't point to any parent is the initial commit.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
